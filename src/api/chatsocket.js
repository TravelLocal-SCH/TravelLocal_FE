import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

let stompClient = null;

export const connectWebSocket = (chatRoomId, onMessageReceived) => {
  stompClient = new Client({
    // ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† SockJS ÏóîÎìúÌè¨Ïù∏Ìä∏ (SpringÏóêÏÑú ÏÑ§Ï†ïÌïú WebSocket ÏóîÎìúÌè¨Ïù∏Ìä∏)
    webSocketFactory: () => new SockJS('http://<your-backend-server>/ws'), // Ïòà: http://localhost:8083/ws

    reconnectDelay: 5000,

    onConnect: () => {
      console.log('‚úÖ WebSocket connected');

      // Ï±ÑÌåÖÎ∞© Íµ¨ÎèÖ
      stompClient.subscribe(`/topic/chatroom/${chatRoomId}`, (message) => {
        const msg = JSON.parse(message.body);
        console.log('üì© New message received:', msg);
        onMessageReceived(msg); // ÌîÑÎ°†Ìä∏Ïóê Î©îÏãúÏßÄ Ï†ÑÎã¨
      });
    },

    onStompError: (frame) => {
      console.error('‚ùå WebSocket error:', frame);
    },
  });

  stompClient.activate();
};

export const disconnectWebSocket = () => {
  if (stompClient && stompClient.connected) {
    stompClient.deactivate();
  }
};

export const sendMessage = (chatRoomId, userId, content) => {
  if (stompClient && stompClient.connected) {
    const message = {
      id: chatRoomId,
      userId: userId,
      message: content,
    };

    stompClient.publish({
      destination: '/app/chat.sendMessage',
      body: JSON.stringify(message),
    });
  } else {
    console.warn('‚ö†Ô∏è WebSocket not connected');
  }
};
